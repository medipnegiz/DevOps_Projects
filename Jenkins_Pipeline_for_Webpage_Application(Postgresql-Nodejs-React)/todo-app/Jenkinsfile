pipeline {
    agent any
    tools {
        terraform 'terraform'
}
    environment {
        PATH=sh(script:"echo $PATH:/usr/local/bin", returnStdout:true).trim()       // ciktinin sadece deger olarak yazdirilmasini saglar
        AWS_REGION = "us-east-1"
        AWS_ACCOUNT_ID=sh(script:'export PATH="$PATH:/usr/local/bin" && aws sts get-caller-identity --query Account --output text', returnStdout:true).trim()
        ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        APP_REPO_NAME = "edipnegiz-repo/todo-app"
        APP_NAME = "todo"
        // HOME_FOLDER = "/home/ec2-user"
        // GIT_FOLDER = sh(script:'echo ${GIT_URL} | sed "s/.*\\///;s/.git$//"', returnStdout:true).trim()
    }
    stages {
        stage('Create Infrastructure for the App') {
            steps {
                echo 'Creating Infrastructure for the App on AWS Cloud'
                sh 'terraform init'
                sh 'terraform apply --auto-approve'
            }
        }
        stage('Create ECR Repo') {
                    steps {
                        echo 'Creating ECR Repo for App'            // repository yoksa kendisi olusturacak varsa islem yapmayacak.
                        sh '''                         
                        aws ecr describe-repositories --region ${AWS_REGION} --repository-name ${APP_REPO_NAME} || \
                        aws ecr create-repository \
                        --repository-name ${APP_REPO_NAME} \
                        --image-scanning-configuration scanOnPush=false \
                        --image-tag-mutability MUTABLE \
                        --region ${AWS_REGION}
                        '''
                    }
                }
        stage('Build App Docker Image') {
            steps {
                echo 'Building App Image'
                script {
                    env.NODE_IP = sh(script: 'terraform output -raw node_public_ip', returnStdout:true).trim()
                    env.DB_HOST = sh(script: 'terraform output -raw postgre_private_ip', returnStdout:true).trim()
                }
                sh 'echo ${DB_HOST}'
                sh 'echo ${NODE_IP}'
                sh 'envsubst < node-env-template > ./nodejs/server/.env'        // "envsubst" ilk dosyadaki herseyi diger dosyaya aktarmak icin kullanilir
                sh 'cat ./nodejs/server/.env'                                   // "node-env-template" dosyayi degiskenler ile birlikte .env dosyasina yazabilmek icin olusturuldu.
                sh 'echo REACT_APP_BASE_URL=http://${NODE_IP}:5000/ > ./react/client/.env'          // farkli bir kullanim olarak böyle de dosya icine yazilabilir
                sh 'cat ./react/client/.env'
                sh 'docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:postgre" -f ./postgresql/dockerfile-postgresql .'  // "--force-rm" ara katmanlari silmek icin kullanilir
                sh 'docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:nodejs" -f ./nodejs/dockerfile-nodejs .'       // "-f" ile Dockerfile dizini belirtilir
                sh 'docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:react" -f ./react/dockerfile-react .'
                sh 'docker image ls'
            }
        }
        stage('Push Image to ECR Repo') {
            steps {                     // her seferinde yeni bir shell actigi icin giris yapmak gerekir
                echo 'Pushing App Image to ECR Repo'
                sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin "$ECR_REGISTRY"'
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:postgre"'
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:nodejs"'
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:react"'
            }
        }
        stage('wait the instance') {
            steps {
                script {
                    echo 'Waiting for the instance'             // instance status check OK olana kadar bekleyecek
                    id = sh(script: 'aws ec2 describe-instances --filters Name=tag-value,Values=ansible_postgresql Name=instance-state-name,Values=running --query Reservations[*].Instances[*].[InstanceId] --output text',  returnStdout:true).trim()
                    sh 'aws ec2 wait instance-status-ok --instance-ids $id'
                }
            }
        }
        stage('Deploy the App') {
            steps {
                echo 'Deploy the App'
                sh 'ls -l'
                sh 'ansible --version'
                sh 'ansible-inventory --graph'              // credential kismi Jenkins'de pem dosyasi kaydedildi, burada o isim girildi. "NVirginia-key"
                ansiblePlaybook credentialsId: 'NVirginia-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'inventory_aws_ec2.yml', playbook: 'docker_project.yml'
             }
        }
        stage('Destroy the infrastructure'){
                    steps{
                        timeout(time:5, unit:'DAYS'){               // Burada onay istiyor. Bu kisim Deploy'a eklenirse artik Delivery olarak islem yapar. Onaydan sonra yayinlar
                            input message:'Approve terminate'       // onay verilirse olusturulan bütün kaynaklar silinecek
                        }
                        sh """
                        docker image prune -af
                        terraform destroy --auto-approve
                        aws ecr delete-repository \
                        --repository-name ${APP_REPO_NAME} \
                        --region ${AWS_REGION} \
                        --force
                        """
                    }
                }
    }
        post {
        always {                                // her zaman calistirilacak 
            echo 'Deleting all local images'
            sh 'docker image prune -af'         // Jenkins server'da olusan tüm imagelari silecek
        }
        failure {                               // bir hata alinmasi durumunda calisacak ve bütün kaynaklari silecek
            echo 'Delete the Image Repository on ECR due to the Failure'
            sh """
                aws ecr delete-repository \
                  --repository-name ${APP_REPO_NAME} \
                  --region ${AWS_REGION}\
                  --force
                """
            echo 'Deleting Terraform Stack due to the Failure'
                sh 'terraform destroy --auto-approve'
        }
    }
}

